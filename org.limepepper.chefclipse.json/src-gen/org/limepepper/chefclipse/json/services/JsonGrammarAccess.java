/*
* generated by Xtext
*/
package org.limepepper.chefclipse.json.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class JsonGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cObjectsAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cObjectsJsonObjectParserRuleCall_0_0 = (RuleCall)cObjectsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cLSQUAREParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Assignment cObjectsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cObjectsJsonObjectParserRuleCall_1_1_0 = (RuleCall)cObjectsAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final RuleCall cCOMMAParserRuleCall_1_2_0 = (RuleCall)cGroup_1_2.eContents().get(0);
		private final Assignment cObjectsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cObjectsJsonObjectParserRuleCall_1_2_1_0 = (RuleCall)cObjectsAssignment_1_2_1.eContents().get(0);
		private final RuleCall cRSQUAREParserRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		
		//Model:
		//	objects+=JsonObject | LSQUARE objects+=JsonObject (COMMA objects+=JsonObject)* RSQUARE;
		public ParserRule getRule() { return rule; }

		//objects+=JsonObject | LSQUARE objects+=JsonObject (COMMA objects+=JsonObject)* RSQUARE
		public Alternatives getAlternatives() { return cAlternatives; }

		//objects+=JsonObject
		public Assignment getObjectsAssignment_0() { return cObjectsAssignment_0; }

		//JsonObject
		public RuleCall getObjectsJsonObjectParserRuleCall_0_0() { return cObjectsJsonObjectParserRuleCall_0_0; }

		//LSQUARE objects+=JsonObject (COMMA objects+=JsonObject)* RSQUARE
		public Group getGroup_1() { return cGroup_1; }

		//LSQUARE
		public RuleCall getLSQUAREParserRuleCall_1_0() { return cLSQUAREParserRuleCall_1_0; }

		//objects+=JsonObject
		public Assignment getObjectsAssignment_1_1() { return cObjectsAssignment_1_1; }

		//JsonObject
		public RuleCall getObjectsJsonObjectParserRuleCall_1_1_0() { return cObjectsJsonObjectParserRuleCall_1_1_0; }

		//(COMMA objects+=JsonObject)*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//COMMA
		public RuleCall getCOMMAParserRuleCall_1_2_0() { return cCOMMAParserRuleCall_1_2_0; }

		//objects+=JsonObject
		public Assignment getObjectsAssignment_1_2_1() { return cObjectsAssignment_1_2_1; }

		//JsonObject
		public RuleCall getObjectsJsonObjectParserRuleCall_1_2_1_0() { return cObjectsJsonObjectParserRuleCall_1_2_1_0; }

		//RSQUARE
		public RuleCall getRSQUAREParserRuleCall_1_3() { return cRSQUAREParserRuleCall_1_3; }
	}

	public class JsonObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JsonObject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLCURLYParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cPairsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPairsPairParserRuleCall_1_0 = (RuleCall)cPairsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cCOMMAParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cPairsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPairsPairParserRuleCall_2_1_0 = (RuleCall)cPairsAssignment_2_1.eContents().get(0);
		private final RuleCall cRCURLYParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//JsonObject:
		//	LCURLY pairs+=Pair (COMMA pairs+=Pair)* RCURLY;
		public ParserRule getRule() { return rule; }

		//LCURLY pairs+=Pair (COMMA pairs+=Pair)* RCURLY
		public Group getGroup() { return cGroup; }

		//LCURLY
		public RuleCall getLCURLYParserRuleCall_0() { return cLCURLYParserRuleCall_0; }

		//pairs+=Pair
		public Assignment getPairsAssignment_1() { return cPairsAssignment_1; }

		//Pair
		public RuleCall getPairsPairParserRuleCall_1_0() { return cPairsPairParserRuleCall_1_0; }

		//(COMMA pairs+=Pair)*
		public Group getGroup_2() { return cGroup_2; }

		//COMMA
		public RuleCall getCOMMAParserRuleCall_2_0() { return cCOMMAParserRuleCall_2_0; }

		//pairs+=Pair
		public Assignment getPairsAssignment_2_1() { return cPairsAssignment_2_1; }

		//Pair
		public RuleCall getPairsPairParserRuleCall_2_1_0() { return cPairsPairParserRuleCall_2_1_0; }

		//RCURLY
		public RuleCall getRCURLYParserRuleCall_3() { return cRCURLYParserRuleCall_3; }
	}

	public class PairElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Pair");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStringAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStringSTRINGTerminalRuleCall_0_0 = (RuleCall)cStringAssignment_0.eContents().get(0);
		private final RuleCall cCOLONParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Pair:
		//	string=STRING COLON value=Value;
		public ParserRule getRule() { return rule; }

		//string=STRING COLON value=Value
		public Group getGroup() { return cGroup; }

		//string=STRING
		public Assignment getStringAssignment_0() { return cStringAssignment_0; }

		//STRING
		public RuleCall getStringSTRINGTerminalRuleCall_0_0() { return cStringSTRINGTerminalRuleCall_0_0; }

		//COLON
		public RuleCall getCOLONParserRuleCall_1() { return cCOLONParserRuleCall_1; }

		//value=Value
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//Value
		public RuleCall getValueValueParserRuleCall_2_0() { return cValueValueParserRuleCall_2_0; }
	}

	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStringValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNumberValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cJsonObjectValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cArrayValueParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cBooleanValueParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cNullValueParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//Value:
		//	StringValue | NumberValue | JsonObjectValue | ArrayValue | BooleanValue | NullValue;
		public ParserRule getRule() { return rule; }

		//StringValue | NumberValue | JsonObjectValue | ArrayValue | BooleanValue | NullValue
		public Alternatives getAlternatives() { return cAlternatives; }

		//StringValue
		public RuleCall getStringValueParserRuleCall_0() { return cStringValueParserRuleCall_0; }

		//NumberValue
		public RuleCall getNumberValueParserRuleCall_1() { return cNumberValueParserRuleCall_1; }

		//JsonObjectValue
		public RuleCall getJsonObjectValueParserRuleCall_2() { return cJsonObjectValueParserRuleCall_2; }

		//ArrayValue
		public RuleCall getArrayValueParserRuleCall_3() { return cArrayValueParserRuleCall_3; }

		//BooleanValue
		public RuleCall getBooleanValueParserRuleCall_4() { return cBooleanValueParserRuleCall_4; }

		//NullValue
		public RuleCall getNullValueParserRuleCall_5() { return cNullValueParserRuleCall_5; }
	}

	public class StringValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringValue:
		//	value=STRING;
		public ParserRule getRule() { return rule; }

		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}

	public class NumberValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumberValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//NumberValue:
		//	value=INT;
		public ParserRule getRule() { return rule; }

		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}

	public class JsonObjectValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JsonObjectValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueJsonObjectParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//JsonObjectValue:
		//	value=JsonObject;
		public ParserRule getRule() { return rule; }

		//value=JsonObject
		public Assignment getValueAssignment() { return cValueAssignment; }

		//JsonObject
		public RuleCall getValueJsonObjectParserRuleCall_0() { return cValueJsonObjectParserRuleCall_0; }
	}

	public class ArrayValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArrayValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLSQUAREParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueValueParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cCOMMAParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueValueParserRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		private final RuleCall cRSQUAREParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//ArrayValue:
		//	LSQUARE value+=Value (COMMA value+=Value)* RSQUARE;
		public ParserRule getRule() { return rule; }

		//LSQUARE value+=Value (COMMA value+=Value)* RSQUARE
		public Group getGroup() { return cGroup; }

		//LSQUARE
		public RuleCall getLSQUAREParserRuleCall_0() { return cLSQUAREParserRuleCall_0; }

		//value+=Value
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//Value
		public RuleCall getValueValueParserRuleCall_1_0() { return cValueValueParserRuleCall_1_0; }

		//(COMMA value+=Value)*
		public Group getGroup_2() { return cGroup_2; }

		//COMMA
		public RuleCall getCOMMAParserRuleCall_2_0() { return cCOMMAParserRuleCall_2_0; }

		//value+=Value
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }

		//Value
		public RuleCall getValueValueParserRuleCall_2_1_0() { return cValueValueParserRuleCall_2_1_0; }

		//RSQUARE
		public RuleCall getRSQUAREParserRuleCall_3() { return cRSQUAREParserRuleCall_3; }
	}

	public class BooleanValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueBOOLParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//BooleanValue:
		//	value=BOOL;
		public ParserRule getRule() { return rule; }

		//value=BOOL
		public Assignment getValueAssignment() { return cValueAssignment; }

		//BOOL
		public RuleCall getValueBOOLParserRuleCall_0() { return cValueBOOLParserRuleCall_0; }
	}

	public class NullValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NullValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueNULLParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//NullValue:
		//	value=NULL;
		public ParserRule getRule() { return rule; }

		//value=NULL
		public Assignment getValueAssignment() { return cValueAssignment; }

		//NULL
		public RuleCall getValueNULLParserRuleCall_0() { return cValueNULLParserRuleCall_0; }
	}

	public class LCURLYElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LCURLY");
		private final Keyword cLeftCurlyBracketKeyword = (Keyword)rule.eContents().get(1);
		
		//LCURLY:
		//	"{";
		public ParserRule getRule() { return rule; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword() { return cLeftCurlyBracketKeyword; }
	}

	public class RCURLYElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RCURLY");
		private final Keyword cRightCurlyBracketKeyword = (Keyword)rule.eContents().get(1);
		
		//RCURLY:
		//	"}";
		public ParserRule getRule() { return rule; }

		//"}"
		public Keyword getRightCurlyBracketKeyword() { return cRightCurlyBracketKeyword; }
	}

	public class LSQUAREElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LSQUARE");
		private final Keyword cLeftSquareBracketKeyword = (Keyword)rule.eContents().get(1);
		
		//LSQUARE:
		//	"[";
		public ParserRule getRule() { return rule; }

		//"["
		public Keyword getLeftSquareBracketKeyword() { return cLeftSquareBracketKeyword; }
	}

	public class RSQUAREElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RSQUARE");
		private final Keyword cRightSquareBracketKeyword = (Keyword)rule.eContents().get(1);
		
		//RSQUARE:
		//	"]";
		public ParserRule getRule() { return rule; }

		//"]"
		public Keyword getRightSquareBracketKeyword() { return cRightSquareBracketKeyword; }
	}

	public class COLONElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "COLON");
		private final Keyword cColonKeyword = (Keyword)rule.eContents().get(1);
		
		//COLON:
		//	":";
		public ParserRule getRule() { return rule; }

		//":"
		public Keyword getColonKeyword() { return cColonKeyword; }
	}

	public class COMMAElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "COMMA");
		private final Keyword cCommaKeyword = (Keyword)rule.eContents().get(1);
		
		//COMMA:
		//	",";
		public ParserRule getRule() { return rule; }

		//","
		public Keyword getCommaKeyword() { return cCommaKeyword; }
	}

	public class BOOLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BOOL");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//BOOL:
		//	"true" | "false";
		public ParserRule getRule() { return rule; }

		//"true" | "false"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"true"
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }

		//"false"
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}

	public class NULLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NULL");
		private final Keyword cNullKeyword = (Keyword)rule.eContents().get(1);
		
		//NULL:
		//	"null";
		public ParserRule getRule() { return rule; }

		//"null"
		public Keyword getNullKeyword() { return cNullKeyword; }
	}
	
	
	private ModelElements pModel;
	private JsonObjectElements pJsonObject;
	private PairElements pPair;
	private ValueElements pValue;
	private StringValueElements pStringValue;
	private NumberValueElements pNumberValue;
	private JsonObjectValueElements pJsonObjectValue;
	private ArrayValueElements pArrayValue;
	private BooleanValueElements pBooleanValue;
	private NullValueElements pNullValue;
	private LCURLYElements pLCURLY;
	private RCURLYElements pRCURLY;
	private LSQUAREElements pLSQUARE;
	private RSQUAREElements pRSQUARE;
	private COLONElements pCOLON;
	private COMMAElements pCOMMA;
	private BOOLElements pBOOL;
	private NULLElements pNULL;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public JsonGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.limepepper.chefclipse.json.Json".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	objects+=JsonObject | LSQUARE objects+=JsonObject (COMMA objects+=JsonObject)* RSQUARE;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//JsonObject:
	//	LCURLY pairs+=Pair (COMMA pairs+=Pair)* RCURLY;
	public JsonObjectElements getJsonObjectAccess() {
		return (pJsonObject != null) ? pJsonObject : (pJsonObject = new JsonObjectElements());
	}
	
	public ParserRule getJsonObjectRule() {
		return getJsonObjectAccess().getRule();
	}

	//Pair:
	//	string=STRING COLON value=Value;
	public PairElements getPairAccess() {
		return (pPair != null) ? pPair : (pPair = new PairElements());
	}
	
	public ParserRule getPairRule() {
		return getPairAccess().getRule();
	}

	//Value:
	//	StringValue | NumberValue | JsonObjectValue | ArrayValue | BooleanValue | NullValue;
	public ValueElements getValueAccess() {
		return (pValue != null) ? pValue : (pValue = new ValueElements());
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}

	//StringValue:
	//	value=STRING;
	public StringValueElements getStringValueAccess() {
		return (pStringValue != null) ? pStringValue : (pStringValue = new StringValueElements());
	}
	
	public ParserRule getStringValueRule() {
		return getStringValueAccess().getRule();
	}

	//NumberValue:
	//	value=INT;
	public NumberValueElements getNumberValueAccess() {
		return (pNumberValue != null) ? pNumberValue : (pNumberValue = new NumberValueElements());
	}
	
	public ParserRule getNumberValueRule() {
		return getNumberValueAccess().getRule();
	}

	//JsonObjectValue:
	//	value=JsonObject;
	public JsonObjectValueElements getJsonObjectValueAccess() {
		return (pJsonObjectValue != null) ? pJsonObjectValue : (pJsonObjectValue = new JsonObjectValueElements());
	}
	
	public ParserRule getJsonObjectValueRule() {
		return getJsonObjectValueAccess().getRule();
	}

	//ArrayValue:
	//	LSQUARE value+=Value (COMMA value+=Value)* RSQUARE;
	public ArrayValueElements getArrayValueAccess() {
		return (pArrayValue != null) ? pArrayValue : (pArrayValue = new ArrayValueElements());
	}
	
	public ParserRule getArrayValueRule() {
		return getArrayValueAccess().getRule();
	}

	//BooleanValue:
	//	value=BOOL;
	public BooleanValueElements getBooleanValueAccess() {
		return (pBooleanValue != null) ? pBooleanValue : (pBooleanValue = new BooleanValueElements());
	}
	
	public ParserRule getBooleanValueRule() {
		return getBooleanValueAccess().getRule();
	}

	//NullValue:
	//	value=NULL;
	public NullValueElements getNullValueAccess() {
		return (pNullValue != null) ? pNullValue : (pNullValue = new NullValueElements());
	}
	
	public ParserRule getNullValueRule() {
		return getNullValueAccess().getRule();
	}

	//LCURLY:
	//	"{";
	public LCURLYElements getLCURLYAccess() {
		return (pLCURLY != null) ? pLCURLY : (pLCURLY = new LCURLYElements());
	}
	
	public ParserRule getLCURLYRule() {
		return getLCURLYAccess().getRule();
	}

	//RCURLY:
	//	"}";
	public RCURLYElements getRCURLYAccess() {
		return (pRCURLY != null) ? pRCURLY : (pRCURLY = new RCURLYElements());
	}
	
	public ParserRule getRCURLYRule() {
		return getRCURLYAccess().getRule();
	}

	//LSQUARE:
	//	"[";
	public LSQUAREElements getLSQUAREAccess() {
		return (pLSQUARE != null) ? pLSQUARE : (pLSQUARE = new LSQUAREElements());
	}
	
	public ParserRule getLSQUARERule() {
		return getLSQUAREAccess().getRule();
	}

	//RSQUARE:
	//	"]";
	public RSQUAREElements getRSQUAREAccess() {
		return (pRSQUARE != null) ? pRSQUARE : (pRSQUARE = new RSQUAREElements());
	}
	
	public ParserRule getRSQUARERule() {
		return getRSQUAREAccess().getRule();
	}

	//COLON:
	//	":";
	public COLONElements getCOLONAccess() {
		return (pCOLON != null) ? pCOLON : (pCOLON = new COLONElements());
	}
	
	public ParserRule getCOLONRule() {
		return getCOLONAccess().getRule();
	}

	//COMMA:
	//	",";
	public COMMAElements getCOMMAAccess() {
		return (pCOMMA != null) ? pCOMMA : (pCOMMA = new COMMAElements());
	}
	
	public ParserRule getCOMMARule() {
		return getCOMMAAccess().getRule();
	}

	//BOOL:
	//	"true" | "false";
	public BOOLElements getBOOLAccess() {
		return (pBOOL != null) ? pBOOL : (pBOOL = new BOOLElements());
	}
	
	public ParserRule getBOOLRule() {
		return getBOOLAccess().getRule();
	}

	//NULL:
	//	"null";
	public NULLElements getNULLAccess() {
		return (pNULL != null) ? pNULL : (pNULL = new NULLElements());
	}
	
	public ParserRule getNULLRule() {
		return getNULLAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
