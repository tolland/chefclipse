/**
 */
package org.limepepper.chefclipse.REST.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITableItemLabelProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.limepepper.chefclipse.REST.util.RESTAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class RESTItemProviderAdapterFactory extends RESTAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
    /**
     * This keeps track of the root adapter factory that delegates to this adapter factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ComposedAdapterFactory parentAdapterFactory;

    /**
     * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected IChangeNotifier changeNotifier = new ChangeNotifier();

    /**
     * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected Collection<Object> supportedTypes = new ArrayList<Object>();

    /**
     * This constructs an instance.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public RESTItemProviderAdapterFactory() {
        supportedTypes.add(IEditingDomainItemProvider.class);
        supportedTypes.add(IStructuredItemContentProvider.class);
        supportedTypes.add(ITreeItemContentProvider.class);
        supportedTypes.add(IItemLabelProvider.class);
        supportedTypes.add(IItemPropertySource.class);
        supportedTypes.add(ITableItemLabelProvider.class);
    }

    /**
     * This keeps track of the one adapter used for all {@link org.limepepper.chefclipse.REST.CookbookListResp} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected CookbookListRespItemProvider cookbookListRespItemProvider;

    /**
     * This creates an adapter for a {@link org.limepepper.chefclipse.REST.CookbookListResp}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createCookbookListRespAdapter() {
        if (cookbookListRespItemProvider == null) {
            cookbookListRespItemProvider = new CookbookListRespItemProvider(this);
        }

        return cookbookListRespItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.limepepper.chefclipse.REST.CookbookVersionResp} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected CookbookVersionRespItemProvider cookbookVersionRespItemProvider;

    /**
     * This creates an adapter for a {@link org.limepepper.chefclipse.REST.CookbookVersionResp}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createCookbookVersionRespAdapter() {
        if (cookbookVersionRespItemProvider == null) {
            cookbookVersionRespItemProvider = new CookbookVersionRespItemProvider(this);
        }

        return cookbookVersionRespItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.limepepper.chefclipse.REST.CookbookMetadata} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected CookbookMetadataItemProvider cookbookMetadataItemProvider;

    /**
     * This creates an adapter for a {@link org.limepepper.chefclipse.REST.CookbookMetadata}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createCookbookMetadataAdapter() {
        if (cookbookMetadataItemProvider == null) {
            cookbookMetadataItemProvider = new CookbookMetadataItemProvider(this);
        }

        return cookbookMetadataItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.limepepper.chefclipse.REST.CookbookDefinition} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected CookbookDefinitionItemProvider cookbookDefinitionItemProvider;

    /**
     * This creates an adapter for a {@link org.limepepper.chefclipse.REST.CookbookDefinition}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createCookbookDefinitionAdapter() {
        if (cookbookDefinitionItemProvider == null) {
            cookbookDefinitionItemProvider = new CookbookDefinitionItemProvider(this);
        }

        return cookbookDefinitionItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.limepepper.chefclipse.REST.CookbookFile} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected CookbookFileItemProvider cookbookFileItemProvider;

    /**
     * This creates an adapter for a {@link org.limepepper.chefclipse.REST.CookbookFile}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createCookbookFileAdapter() {
        if (cookbookFileItemProvider == null) {
            cookbookFileItemProvider = new CookbookFileItemProvider(this);
        }

        return cookbookFileItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.limepepper.chefclipse.REST.CookbookLibrary} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected CookbookLibraryItemProvider cookbookLibraryItemProvider;

    /**
     * This creates an adapter for a {@link org.limepepper.chefclipse.REST.CookbookLibrary}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createCookbookLibraryAdapter() {
        if (cookbookLibraryItemProvider == null) {
            cookbookLibraryItemProvider = new CookbookLibraryItemProvider(this);
        }

        return cookbookLibraryItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.limepepper.chefclipse.REST.CookbookTemplate} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected CookbookTemplateItemProvider cookbookTemplateItemProvider;

    /**
     * This creates an adapter for a {@link org.limepepper.chefclipse.REST.CookbookTemplate}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createCookbookTemplateAdapter() {
        if (cookbookTemplateItemProvider == null) {
            cookbookTemplateItemProvider = new CookbookTemplateItemProvider(this);
        }

        return cookbookTemplateItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.limepepper.chefclipse.REST.CookbookRootFile} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected CookbookRootFileItemProvider cookbookRootFileItemProvider;

    /**
     * This creates an adapter for a {@link org.limepepper.chefclipse.REST.CookbookRootFile}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createCookbookRootFileAdapter() {
        if (cookbookRootFileItemProvider == null) {
            cookbookRootFileItemProvider = new CookbookRootFileItemProvider(this);
        }

        return cookbookRootFileItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.limepepper.chefclipse.REST.CookbookRecipe} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected CookbookRecipeItemProvider cookbookRecipeItemProvider;

    /**
     * This creates an adapter for a {@link org.limepepper.chefclipse.REST.CookbookRecipe}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createCookbookRecipeAdapter() {
        if (cookbookRecipeItemProvider == null) {
            cookbookRecipeItemProvider = new CookbookRecipeItemProvider(this);
        }

        return cookbookRecipeItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.limepepper.chefclipse.REST.CookbookResource} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected CookbookResourceItemProvider cookbookResourceItemProvider;

    /**
     * This creates an adapter for a {@link org.limepepper.chefclipse.REST.CookbookResource}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createCookbookResourceAdapter() {
        if (cookbookResourceItemProvider == null) {
            cookbookResourceItemProvider = new CookbookResourceItemProvider(this);
        }

        return cookbookResourceItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.limepepper.chefclipse.REST.CookbookProviders} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected CookbookProvidersItemProvider cookbookProvidersItemProvider;

    /**
     * This creates an adapter for a {@link org.limepepper.chefclipse.REST.CookbookProviders}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createCookbookProvidersAdapter() {
        if (cookbookProvidersItemProvider == null) {
            cookbookProvidersItemProvider = new CookbookProvidersItemProvider(this);
        }

        return cookbookProvidersItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.limepepper.chefclipse.REST.CookbookAttributes} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected CookbookAttributesItemProvider cookbookAttributesItemProvider;

    /**
     * This creates an adapter for a {@link org.limepepper.chefclipse.REST.CookbookAttributes}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createCookbookAttributesAdapter() {
        if (cookbookAttributesItemProvider == null) {
            cookbookAttributesItemProvider = new CookbookAttributesItemProvider(this);
        }

        return cookbookAttributesItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.limepepper.chefclipse.REST.CookbookMaintainer} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected CookbookMaintainerItemProvider cookbookMaintainerItemProvider;

    /**
     * This creates an adapter for a {@link org.limepepper.chefclipse.REST.CookbookMaintainer}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createCookbookMaintainerAdapter() {
        if (cookbookMaintainerItemProvider == null) {
            cookbookMaintainerItemProvider = new CookbookMaintainerItemProvider(this);
        }

        return cookbookMaintainerItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.limepepper.chefclipse.REST.RoleResp} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected RoleRespItemProvider roleRespItemProvider;

    /**
     * This creates an adapter for a {@link org.limepepper.chefclipse.REST.RoleResp}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createRoleRespAdapter() {
        if (roleRespItemProvider == null) {
            roleRespItemProvider = new RoleRespItemProvider(this);
        }

        return roleRespItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.limepepper.chefclipse.REST.RoleListResp} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected RoleListRespItemProvider roleListRespItemProvider;

    /**
     * This creates an adapter for a {@link org.limepepper.chefclipse.REST.RoleListResp}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createRoleListRespAdapter() {
        if (roleListRespItemProvider == null) {
            roleListRespItemProvider = new RoleListRespItemProvider(this);
        }

        return roleListRespItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.limepepper.chefclipse.REST.CookbookListVersionResp} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected CookbookListVersionRespItemProvider cookbookListVersionRespItemProvider;

    /**
     * This creates an adapter for a {@link org.limepepper.chefclipse.REST.CookbookListVersionResp}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createCookbookListVersionRespAdapter() {
        if (cookbookListVersionRespItemProvider == null) {
            cookbookListVersionRespItemProvider = new CookbookListVersionRespItemProvider(this);
        }

        return cookbookListVersionRespItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.limepepper.chefclipse.REST.NodeResp} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected NodeRespItemProvider nodeRespItemProvider;

    /**
     * This creates an adapter for a {@link org.limepepper.chefclipse.REST.NodeResp}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createNodeRespAdapter() {
        if (nodeRespItemProvider == null) {
            nodeRespItemProvider = new NodeRespItemProvider(this);
        }

        return nodeRespItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.limepepper.chefclipse.REST.NodeListResp} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected NodeListRespItemProvider nodeListRespItemProvider;

    /**
     * This creates an adapter for a {@link org.limepepper.chefclipse.REST.NodeListResp}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createNodeListRespAdapter() {
        if (nodeListRespItemProvider == null) {
            nodeListRespItemProvider = new NodeListRespItemProvider(this);
        }

        return nodeListRespItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.limepepper.chefclipse.REST.SearchResultResp} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected SearchResultRespItemProvider searchResultRespItemProvider;

    /**
     * This creates an adapter for a {@link org.limepepper.chefclipse.REST.SearchResultResp}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createSearchResultRespAdapter() {
        if (searchResultRespItemProvider == null) {
            searchResultRespItemProvider = new SearchResultRespItemProvider(this);
        }

        return searchResultRespItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.limepepper.chefclipse.REST.SearchIndexResp} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected SearchIndexRespItemProvider searchIndexRespItemProvider;

    /**
     * This creates an adapter for a {@link org.limepepper.chefclipse.REST.SearchIndexResp}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createSearchIndexRespAdapter() {
        if (searchIndexRespItemProvider == null) {
            searchIndexRespItemProvider = new SearchIndexRespItemProvider(this);
        }

        return searchIndexRespItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.limepepper.chefclipse.REST.CookbookMetadataDependency} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected CookbookMetadataDependencyItemProvider cookbookMetadataDependencyItemProvider;

    /**
     * This creates an adapter for a {@link org.limepepper.chefclipse.REST.CookbookMetadataDependency}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createCookbookMetadataDependencyAdapter() {
        if (cookbookMetadataDependencyItemProvider == null) {
            cookbookMetadataDependencyItemProvider = new CookbookMetadataDependencyItemProvider(this);
        }

        return cookbookMetadataDependencyItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.limepepper.chefclipse.REST.EnvironmentResp} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected EnvironmentRespItemProvider environmentRespItemProvider;

    /**
     * This creates an adapter for a {@link org.limepepper.chefclipse.REST.EnvironmentResp}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createEnvironmentRespAdapter() {
        if (environmentRespItemProvider == null) {
            environmentRespItemProvider = new EnvironmentRespItemProvider(this);
        }

        return environmentRespItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.limepepper.chefclipse.REST.JSONObjectResp} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected JSONObjectRespItemProvider jsonObjectRespItemProvider;

    /**
     * This creates an adapter for a {@link org.limepepper.chefclipse.REST.JSONObjectResp}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createJSONObjectRespAdapter() {
        if (jsonObjectRespItemProvider == null) {
            jsonObjectRespItemProvider = new JSONObjectRespItemProvider(this);
        }

        return jsonObjectRespItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.limepepper.chefclipse.REST.ClientResp} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ClientRespItemProvider clientRespItemProvider;

    /**
     * This creates an adapter for a {@link org.limepepper.chefclipse.REST.ClientResp}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createClientRespAdapter() {
        if (clientRespItemProvider == null) {
            clientRespItemProvider = new ClientRespItemProvider(this);
        }

        return clientRespItemProvider;
    }

    /**
     * This keeps track of the one adapter used for all {@link org.limepepper.chefclipse.REST.ClientListResp} instances.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    protected ClientListRespItemProvider clientListRespItemProvider;

    /**
     * This creates an adapter for a {@link org.limepepper.chefclipse.REST.ClientListResp}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter createClientListRespAdapter() {
        if (clientListRespItemProvider == null) {
            clientListRespItemProvider = new ClientListRespItemProvider(this);
        }

        return clientListRespItemProvider;
    }

    /**
     * This returns the root adapter factory that contains this factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public ComposeableAdapterFactory getRootAdapterFactory() {
        return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
    }

    /**
     * This sets the composed adapter factory that contains this factory.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
        this.parentAdapterFactory = parentAdapterFactory;
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public boolean isFactoryForType(Object type) {
        return supportedTypes.contains(type) || super.isFactoryForType(type);
    }

    /**
     * This implementation substitutes the factory itself as the key for the adapter.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Adapter adapt(Notifier notifier, Object type) {
        return super.adapt(notifier, this);
    }

    /**
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    @Override
    public Object adapt(Object object, Object type) {
        if (isFactoryForType(type)) {
            Object adapter = super.adapt(object, type);
            if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
                return adapter;
            }
        }

        return null;
    }

    /**
     * This adds a listener.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void addListener(INotifyChangedListener notifyChangedListener) {
        changeNotifier.addListener(notifyChangedListener);
    }

    /**
     * This removes a listener.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void removeListener(INotifyChangedListener notifyChangedListener) {
        changeNotifier.removeListener(notifyChangedListener);
    }

    /**
     * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void fireNotifyChanged(Notification notification) {
        changeNotifier.fireNotifyChanged(notification);

        if (parentAdapterFactory != null) {
            parentAdapterFactory.fireNotifyChanged(notification);
        }
    }

    /**
     * This disposes all of the item providers created by this factory. 
     * <!-- begin-user-doc -->
     * <!-- end-user-doc -->
     * @generated
     */
    public void dispose() {
        if (cookbookListRespItemProvider != null) cookbookListRespItemProvider.dispose();
        if (cookbookVersionRespItemProvider != null) cookbookVersionRespItemProvider.dispose();
        if (cookbookMetadataItemProvider != null) cookbookMetadataItemProvider.dispose();
        if (cookbookDefinitionItemProvider != null) cookbookDefinitionItemProvider.dispose();
        if (cookbookFileItemProvider != null) cookbookFileItemProvider.dispose();
        if (cookbookLibraryItemProvider != null) cookbookLibraryItemProvider.dispose();
        if (cookbookTemplateItemProvider != null) cookbookTemplateItemProvider.dispose();
        if (cookbookRootFileItemProvider != null) cookbookRootFileItemProvider.dispose();
        if (cookbookRecipeItemProvider != null) cookbookRecipeItemProvider.dispose();
        if (cookbookResourceItemProvider != null) cookbookResourceItemProvider.dispose();
        if (cookbookProvidersItemProvider != null) cookbookProvidersItemProvider.dispose();
        if (cookbookAttributesItemProvider != null) cookbookAttributesItemProvider.dispose();
        if (cookbookMaintainerItemProvider != null) cookbookMaintainerItemProvider.dispose();
        if (roleRespItemProvider != null) roleRespItemProvider.dispose();
        if (roleListRespItemProvider != null) roleListRespItemProvider.dispose();
        if (cookbookListVersionRespItemProvider != null) cookbookListVersionRespItemProvider.dispose();
        if (nodeRespItemProvider != null) nodeRespItemProvider.dispose();
        if (nodeListRespItemProvider != null) nodeListRespItemProvider.dispose();
        if (searchResultRespItemProvider != null) searchResultRespItemProvider.dispose();
        if (searchIndexRespItemProvider != null) searchIndexRespItemProvider.dispose();
        if (cookbookMetadataDependencyItemProvider != null) cookbookMetadataDependencyItemProvider.dispose();
        if (environmentRespItemProvider != null) environmentRespItemProvider.dispose();
        if (jsonObjectRespItemProvider != null) jsonObjectRespItemProvider.dispose();
        if (clientRespItemProvider != null) clientRespItemProvider.dispose();
        if (clientListRespItemProvider != null) clientListRespItemProvider.dispose();
    }

}
