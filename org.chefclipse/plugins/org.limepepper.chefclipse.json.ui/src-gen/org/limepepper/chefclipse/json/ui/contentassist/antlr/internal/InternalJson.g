/*
* generated by Xtext
*/
grammar InternalJson;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.limepepper.chefclipse.json.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.limepepper.chefclipse.json.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.limepepper.chefclipse.json.services.JsonGrammarAccess;

}

@parser::members {
 
 	private JsonGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(JsonGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModelAccess().getAlternatives()); }
(rule__Model__Alternatives)
{ after(grammarAccess.getModelAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleJsonObject
entryRuleJsonObject 
:
{ before(grammarAccess.getJsonObjectRule()); }
	 ruleJsonObject
{ after(grammarAccess.getJsonObjectRule()); } 
	 EOF 
;

// Rule JsonObject
ruleJsonObject
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getJsonObjectAccess().getGroup()); }
(rule__JsonObject__Group__0)
{ after(grammarAccess.getJsonObjectAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePair
entryRulePair 
:
{ before(grammarAccess.getPairRule()); }
	 rulePair
{ after(grammarAccess.getPairRule()); } 
	 EOF 
;

// Rule Pair
rulePair
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPairAccess().getGroup()); }
(rule__Pair__Group__0)
{ after(grammarAccess.getPairAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleValue
entryRuleValue 
:
{ before(grammarAccess.getValueRule()); }
	 ruleValue
{ after(grammarAccess.getValueRule()); } 
	 EOF 
;

// Rule Value
ruleValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getValueAccess().getAlternatives()); }
(rule__Value__Alternatives)
{ after(grammarAccess.getValueAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStringValue
entryRuleStringValue 
:
{ before(grammarAccess.getStringValueRule()); }
	 ruleStringValue
{ after(grammarAccess.getStringValueRule()); } 
	 EOF 
;

// Rule StringValue
ruleStringValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStringValueAccess().getValueAssignment()); }
(rule__StringValue__ValueAssignment)
{ after(grammarAccess.getStringValueAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNumberValue
entryRuleNumberValue 
:
{ before(grammarAccess.getNumberValueRule()); }
	 ruleNumberValue
{ after(grammarAccess.getNumberValueRule()); } 
	 EOF 
;

// Rule NumberValue
ruleNumberValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNumberValueAccess().getValueAssignment()); }
(rule__NumberValue__ValueAssignment)
{ after(grammarAccess.getNumberValueAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleJsonObjectValue
entryRuleJsonObjectValue 
:
{ before(grammarAccess.getJsonObjectValueRule()); }
	 ruleJsonObjectValue
{ after(grammarAccess.getJsonObjectValueRule()); } 
	 EOF 
;

// Rule JsonObjectValue
ruleJsonObjectValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getJsonObjectValueAccess().getValueAssignment()); }
(rule__JsonObjectValue__ValueAssignment)
{ after(grammarAccess.getJsonObjectValueAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleArrayValue
entryRuleArrayValue 
:
{ before(grammarAccess.getArrayValueRule()); }
	 ruleArrayValue
{ after(grammarAccess.getArrayValueRule()); } 
	 EOF 
;

// Rule ArrayValue
ruleArrayValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getArrayValueAccess().getGroup()); }
(rule__ArrayValue__Group__0)
{ after(grammarAccess.getArrayValueAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBooleanValue
entryRuleBooleanValue 
:
{ before(grammarAccess.getBooleanValueRule()); }
	 ruleBooleanValue
{ after(grammarAccess.getBooleanValueRule()); } 
	 EOF 
;

// Rule BooleanValue
ruleBooleanValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBooleanValueAccess().getValueAssignment()); }
(rule__BooleanValue__ValueAssignment)
{ after(grammarAccess.getBooleanValueAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNullValue
entryRuleNullValue 
:
{ before(grammarAccess.getNullValueRule()); }
	 ruleNullValue
{ after(grammarAccess.getNullValueRule()); } 
	 EOF 
;

// Rule NullValue
ruleNullValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNullValueAccess().getValueAssignment()); }
(rule__NullValue__ValueAssignment)
{ after(grammarAccess.getNullValueAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLCURLY
entryRuleLCURLY 
:
{ before(grammarAccess.getLCURLYRule()); }
	 ruleLCURLY
{ after(grammarAccess.getLCURLYRule()); } 
	 EOF 
;

// Rule LCURLY
ruleLCURLY
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLCURLYAccess().getLeftCurlyBracketKeyword()); }

	'{' 

{ after(grammarAccess.getLCURLYAccess().getLeftCurlyBracketKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRCURLY
entryRuleRCURLY 
:
{ before(grammarAccess.getRCURLYRule()); }
	 ruleRCURLY
{ after(grammarAccess.getRCURLYRule()); } 
	 EOF 
;

// Rule RCURLY
ruleRCURLY
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRCURLYAccess().getRightCurlyBracketKeyword()); }

	'}' 

{ after(grammarAccess.getRCURLYAccess().getRightCurlyBracketKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLSQUARE
entryRuleLSQUARE 
:
{ before(grammarAccess.getLSQUARERule()); }
	 ruleLSQUARE
{ after(grammarAccess.getLSQUARERule()); } 
	 EOF 
;

// Rule LSQUARE
ruleLSQUARE
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLSQUAREAccess().getLeftSquareBracketKeyword()); }

	'[' 

{ after(grammarAccess.getLSQUAREAccess().getLeftSquareBracketKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRSQUARE
entryRuleRSQUARE 
:
{ before(grammarAccess.getRSQUARERule()); }
	 ruleRSQUARE
{ after(grammarAccess.getRSQUARERule()); } 
	 EOF 
;

// Rule RSQUARE
ruleRSQUARE
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRSQUAREAccess().getRightSquareBracketKeyword()); }

	']' 

{ after(grammarAccess.getRSQUAREAccess().getRightSquareBracketKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCOLON
entryRuleCOLON 
:
{ before(grammarAccess.getCOLONRule()); }
	 ruleCOLON
{ after(grammarAccess.getCOLONRule()); } 
	 EOF 
;

// Rule COLON
ruleCOLON
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCOLONAccess().getColonKeyword()); }

	':' 

{ after(grammarAccess.getCOLONAccess().getColonKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCOMMA
entryRuleCOMMA 
:
{ before(grammarAccess.getCOMMARule()); }
	 ruleCOMMA
{ after(grammarAccess.getCOMMARule()); } 
	 EOF 
;

// Rule COMMA
ruleCOMMA
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCOMMAAccess().getCommaKeyword()); }

	',' 

{ after(grammarAccess.getCOMMAAccess().getCommaKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBOOL
entryRuleBOOL 
:
{ before(grammarAccess.getBOOLRule()); }
	 ruleBOOL
{ after(grammarAccess.getBOOLRule()); } 
	 EOF 
;

// Rule BOOL
ruleBOOL
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBOOLAccess().getAlternatives()); }
(rule__BOOL__Alternatives)
{ after(grammarAccess.getBOOLAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNULL
entryRuleNULL 
:
{ before(grammarAccess.getNULLRule()); }
	 ruleNULL
{ after(grammarAccess.getNULLRule()); } 
	 EOF 
;

// Rule NULL
ruleNULL
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNULLAccess().getNullKeyword()); }

	'null' 

{ after(grammarAccess.getNULLAccess().getNullKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Model__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getObjectsAssignment_0()); }
(rule__Model__ObjectsAssignment_0)
{ after(grammarAccess.getModelAccess().getObjectsAssignment_0()); }
)

    |(
{ before(grammarAccess.getModelAccess().getGroup_1()); }
(rule__Model__Group_1__0)
{ after(grammarAccess.getModelAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Value__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getValueAccess().getStringValueParserRuleCall_0()); }
	ruleStringValue
{ after(grammarAccess.getValueAccess().getStringValueParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getValueAccess().getNumberValueParserRuleCall_1()); }
	ruleNumberValue
{ after(grammarAccess.getValueAccess().getNumberValueParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getValueAccess().getJsonObjectValueParserRuleCall_2()); }
	ruleJsonObjectValue
{ after(grammarAccess.getValueAccess().getJsonObjectValueParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getValueAccess().getArrayValueParserRuleCall_3()); }
	ruleArrayValue
{ after(grammarAccess.getValueAccess().getArrayValueParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getValueAccess().getBooleanValueParserRuleCall_4()); }
	ruleBooleanValue
{ after(grammarAccess.getValueAccess().getBooleanValueParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getValueAccess().getNullValueParserRuleCall_5()); }
	ruleNullValue
{ after(grammarAccess.getValueAccess().getNullValueParserRuleCall_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BOOL__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBOOLAccess().getTrueKeyword_0()); }

	'true' 

{ after(grammarAccess.getBOOLAccess().getTrueKeyword_0()); }
)

    |(
{ before(grammarAccess.getBOOLAccess().getFalseKeyword_1()); }

	'false' 

{ after(grammarAccess.getBOOLAccess().getFalseKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Model__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group_1__0__Impl
	rule__Model__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getLSQUAREParserRuleCall_1_0()); }
	ruleLSQUARE
{ after(grammarAccess.getModelAccess().getLSQUAREParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group_1__1__Impl
	rule__Model__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getObjectsAssignment_1_1()); }
(rule__Model__ObjectsAssignment_1_1)
{ after(grammarAccess.getModelAccess().getObjectsAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group_1__2__Impl
	rule__Model__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getGroup_1_2()); }
(rule__Model__Group_1_2__0)*
{ after(grammarAccess.getModelAccess().getGroup_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getRSQUAREParserRuleCall_1_3()); }
	ruleRSQUARE
{ after(grammarAccess.getModelAccess().getRSQUAREParserRuleCall_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Model__Group_1_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group_1_2__0__Impl
	rule__Model__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group_1_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getCOMMAParserRuleCall_1_2_0()); }
	ruleCOMMA
{ after(grammarAccess.getModelAccess().getCOMMAParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group_1_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group_1_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group_1_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getObjectsAssignment_1_2_1()); }
(rule__Model__ObjectsAssignment_1_2_1)
{ after(grammarAccess.getModelAccess().getObjectsAssignment_1_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__JsonObject__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__JsonObject__Group__0__Impl
	rule__JsonObject__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__JsonObject__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJsonObjectAccess().getLCURLYParserRuleCall_0()); }
	ruleLCURLY
{ after(grammarAccess.getJsonObjectAccess().getLCURLYParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__JsonObject__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__JsonObject__Group__1__Impl
	rule__JsonObject__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__JsonObject__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJsonObjectAccess().getPairsAssignment_1()); }
(rule__JsonObject__PairsAssignment_1)
{ after(grammarAccess.getJsonObjectAccess().getPairsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__JsonObject__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__JsonObject__Group__2__Impl
	rule__JsonObject__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__JsonObject__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJsonObjectAccess().getGroup_2()); }
(rule__JsonObject__Group_2__0)*
{ after(grammarAccess.getJsonObjectAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__JsonObject__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__JsonObject__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__JsonObject__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJsonObjectAccess().getRCURLYParserRuleCall_3()); }
	ruleRCURLY
{ after(grammarAccess.getJsonObjectAccess().getRCURLYParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__JsonObject__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__JsonObject__Group_2__0__Impl
	rule__JsonObject__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__JsonObject__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJsonObjectAccess().getCOMMAParserRuleCall_2_0()); }
	ruleCOMMA
{ after(grammarAccess.getJsonObjectAccess().getCOMMAParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__JsonObject__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__JsonObject__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__JsonObject__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJsonObjectAccess().getPairsAssignment_2_1()); }
(rule__JsonObject__PairsAssignment_2_1)
{ after(grammarAccess.getJsonObjectAccess().getPairsAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Pair__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Pair__Group__0__Impl
	rule__Pair__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Pair__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPairAccess().getStringAssignment_0()); }
(rule__Pair__StringAssignment_0)
{ after(grammarAccess.getPairAccess().getStringAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Pair__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Pair__Group__1__Impl
	rule__Pair__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Pair__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPairAccess().getCOLONParserRuleCall_1()); }
	ruleCOLON
{ after(grammarAccess.getPairAccess().getCOLONParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Pair__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Pair__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Pair__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPairAccess().getValueAssignment_2()); }
(rule__Pair__ValueAssignment_2)
{ after(grammarAccess.getPairAccess().getValueAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ArrayValue__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayValue__Group__0__Impl
	rule__ArrayValue__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayValue__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayValueAccess().getLSQUAREParserRuleCall_0()); }
	ruleLSQUARE
{ after(grammarAccess.getArrayValueAccess().getLSQUAREParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayValue__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayValue__Group__1__Impl
	rule__ArrayValue__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayValue__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayValueAccess().getValueAssignment_1()); }
(rule__ArrayValue__ValueAssignment_1)
{ after(grammarAccess.getArrayValueAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayValue__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayValue__Group__2__Impl
	rule__ArrayValue__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayValue__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayValueAccess().getGroup_2()); }
(rule__ArrayValue__Group_2__0)*
{ after(grammarAccess.getArrayValueAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayValue__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayValue__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayValue__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayValueAccess().getRSQUAREParserRuleCall_3()); }
	ruleRSQUARE
{ after(grammarAccess.getArrayValueAccess().getRSQUAREParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ArrayValue__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayValue__Group_2__0__Impl
	rule__ArrayValue__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayValue__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayValueAccess().getCOMMAParserRuleCall_2_0()); }
	ruleCOMMA
{ after(grammarAccess.getArrayValueAccess().getCOMMAParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ArrayValue__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ArrayValue__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayValue__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayValueAccess().getValueAssignment_2_1()); }
(rule__ArrayValue__ValueAssignment_2_1)
{ after(grammarAccess.getArrayValueAccess().getValueAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Model__ObjectsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getObjectsJsonObjectParserRuleCall_0_0()); }
	ruleJsonObject{ after(grammarAccess.getModelAccess().getObjectsJsonObjectParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Model__ObjectsAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getObjectsJsonObjectParserRuleCall_1_1_0()); }
	ruleJsonObject{ after(grammarAccess.getModelAccess().getObjectsJsonObjectParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Model__ObjectsAssignment_1_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getObjectsJsonObjectParserRuleCall_1_2_1_0()); }
	ruleJsonObject{ after(grammarAccess.getModelAccess().getObjectsJsonObjectParserRuleCall_1_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__JsonObject__PairsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJsonObjectAccess().getPairsPairParserRuleCall_1_0()); }
	rulePair{ after(grammarAccess.getJsonObjectAccess().getPairsPairParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__JsonObject__PairsAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJsonObjectAccess().getPairsPairParserRuleCall_2_1_0()); }
	rulePair{ after(grammarAccess.getJsonObjectAccess().getPairsPairParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Pair__StringAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPairAccess().getStringSTRINGTerminalRuleCall_0_0()); }
	RULE_STRING{ after(grammarAccess.getPairAccess().getStringSTRINGTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Pair__ValueAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPairAccess().getValueValueParserRuleCall_2_0()); }
	ruleValue{ after(grammarAccess.getPairAccess().getValueValueParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringValue__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringValueAccess().getValueSTRINGTerminalRuleCall_0()); }
	RULE_STRING{ after(grammarAccess.getStringValueAccess().getValueSTRINGTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumberValue__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberValueAccess().getValueINTTerminalRuleCall_0()); }
	RULE_INT{ after(grammarAccess.getNumberValueAccess().getValueINTTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__JsonObjectValue__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJsonObjectValueAccess().getValueJsonObjectParserRuleCall_0()); }
	ruleJsonObject{ after(grammarAccess.getJsonObjectValueAccess().getValueJsonObjectParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayValue__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayValueAccess().getValueValueParserRuleCall_1_0()); }
	ruleValue{ after(grammarAccess.getArrayValueAccess().getValueValueParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ArrayValue__ValueAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getArrayValueAccess().getValueValueParserRuleCall_2_1_0()); }
	ruleValue{ after(grammarAccess.getArrayValueAccess().getValueValueParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanValue__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanValueAccess().getValueBOOLParserRuleCall_0()); }
	ruleBOOL{ after(grammarAccess.getBooleanValueAccess().getValueBOOLParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NullValue__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNullValueAccess().getValueNULLParserRuleCall_0()); }
	ruleNULL{ after(grammarAccess.getNullValueAccess().getValueNULLParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


